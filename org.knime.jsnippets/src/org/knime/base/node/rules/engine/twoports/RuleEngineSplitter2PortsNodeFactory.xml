<?xml version="1.0" encoding="utf-8"?>
<knimeNode type="Manipulator" icon="./rule_engine_splitter.png"
	xmlns="http://knime.org/node/v2.10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v2.10 http://knime.org/node/v2.10.xsd">
	<name>Rule-based Row Splitter (Dictionary)</name>
	<shortDescription>
		 Splits the input table based on user-defined (in a table) business rules
	</shortDescription>

	<fullDescription>
		<intro>
			This node takes a list of user-defined rules and tries to match them
			to each row in the input table in the defined order. If a rule matches and the outcome is
			<tt>TRUE</tt>, the row will be selected for inclusion in the first output table. If the first matching rule
            yields <tt>FALSE</tt> the row will be included in the second output table.
			If no rule matches this row will be put to the second output table (like when the last rule would be <tt>TRUE => FALSE</tt>).
            The roles of first and second output table can be exchanged, see option below.
			<p>
				Each rule is represented by a row.
				The comments start with
				<tt>//</tt>
				in the condition cell, and anything after that is not interpreted as a rule in
				that row.
				Rules consist of a condition part (antecedent), which must
				evaluate to
				<i>true</i>
				or
				<i>false</i>
				, and an outcome (consequent, after the =&gt; symbol) which is either
				<tt>TRUE</tt>
				or
				<tt>FALSE</tt>
				.
			</p>
			<p>
				If no rule matches, the outcome is treated as if it was
				<tt>FALSE</tt>
				.
			</p>
			<p>
				Columns are given by their names surrounded by $, numbers are given
				in the usual decimal representation. Note that strings must not
				contain (double-)quotes (for those cases use the following syntax: <tt>/Oscar Wilde's wisdom: "Experience is simply the name we give our mistakes."/</tt>). The flow variables are
				represented by
				<b>$${</b>
				TypeCharacterAndFlowVarName
				<b>}$$</b>
				.
				The TypeCharacter should be 'D' for double (real) values, 'I' for
				integer values and 'S' for strings.
			</p>
			<p>The logical expressions can be grouped with parentheses. The
				precedence rules for them are the following: <tt>NOT</tt> binds most, <tt>AND</tt>,
				<tt>XOR</tt> and finally <tt>OR</tt> the least.
				Comparison operators always take
				precedence over logical connectives.
				All operators (and their names)
				are case-sensitive.
			</p>
			<p>
				The
				<tt>ROWID</tt>
				represents the row key string, the
				<tt>ROWINDEX</tt>
				is the index of the row (first row has
				<tt>0</tt>
				value), while
				<tt>ROWCOUNT</tt>
				stands for the number of rows in the table.
			</p>
			<p>Some example rules (each should be in one row):</p>
			<pre>
// This is a comment
$Col0$ > 0 => TRUE
</pre>
			When the values in Col0 are greater than 0, we select the row to the
			first outport (if no previous rule matched with FALSE outcome).
			<pre>
$Col0$ = "Active" AND $Col1$ &lt;= 5 => TRUE
</pre>
			You can combine conditions.
			<pre>
$Col0$ LIKE "Market Street*" AND 
    ($Col1$ IN ("married", "divorced") 
        OR $Col2$ > 40) => FALSE
</pre>
			With parentheses you can combine multiple conditions.
			<pre>
$Col0$ MATCHES $${SFlowVar0}$$ OR $$ROWINDEX$$ &lt; $${IFlowVar1}$$ =>
    FALSE
</pre>
			The flow variables, table constants can also appear in conditions.
			<p>
				You can use either Ctrl+Space to insert predefined parts, or
				select them from the upper controls.
			</p>
			
			<p>
			The following comparisons result true
			(other values are neither less, nor greater or equal to missing and NaN values):
			<ul>
			<li><b>?</b> =,&lt;=,&gt;= <b>?</b></li>
			<li><b>NaN</b> =,&lt;=,&gt;= <b>NaN</b></li>
			</ul>
			</p>
		</intro>

        <option name="Rules column">Name of the column in the second input table containing the rules or just the conditions if an outcome column is also selected. In case the rules are available during configuration, the type of the outcome column is shown at the right end of this configuration row.</option>
        <option name="=>">In case your rules are in two separate columns (condition and outcome), this should be the column containing the outcome values. (Ignored for the comment -starting with <tt>//</tt>- conditions. It should not contain missing values or other than the logical/boolean values or the <tt>TRUE</tt>/<tt>FALSE</tt> values in a String column.</option>
        <option name="Treat values starting with $ as references">When checked, the values in the string -outcome- column starting with <tt>$</tt> are not treated as string constants with that value, but are tried to be parsed as references to flow variables, columns or table properties.</option>
		<option name="TRUE matches go to">
			A row will be included in the top/bottom output table if the first
			rule that matches has TRUE outcome depending on the selection. If the first matching rule yields FALSE 
            or no rule matches the row will go to the other output table.
		</option>
        <option name="Errors">The errors found in the input table parsing the rules column</option>
        <option name="Warnings">The warnings found in the input table parsing the rules column</option>

	</fullDescription>

	<ports>
		<inPort index="0" name="Input table">Any data table that should be split</inPort>
		<inPort index="1" name="Rules">Table containing the rules</inPort>
		<outPort index="0" name="First output">First output table with rows that are evaluated to TRUE</outPort>
		<outPort index="1" name="Second output">Second output table with rows that are evaluated to FALSE</outPort>
	</ports>
</knimeNode>