<?xml version="1.0" encoding="utf-8"?>
<knimeNode type="Manipulator" icon="./rule_engine_variable.png" xmlns="http://knime.org/node/v3.6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v3.6 http://knime.org/node/v3.6.xsd">
	<name>Rule Engine Variable</name>
	<shortDescription>
		 Applies user-defined business rules to the flow variables
	</shortDescription>

	<fullDescription>
		<intro>
			This node takes a list of user-defined rules and tries to match them
			to the defined flow variables. If a rule matches, its outcome value
			will become the value of the flow variable.
			The first matching rule will determine the outcome.
			<p>
				Each rule is represented by a line.
				The comments start with
				<tt>//</tt>
				in a line, and anything after that is not interpreted as a rule in
				that line.
				Rules consist of a condition part (antecedent), which must
				evaluate to
				<i>true</i>
				or
				<i>false</i>
				, and an outcome (consequent, after the =&gt; symbol) which is put into
				the new flow variable if the rule matches.
			</p>
			<p>The outcome of a rule can either be a constant string, a constant
				number or boolean constant, or a reference to a flow
				variable value.
				The type of the outcome column is the common super
				type of all
				possible
				outcomes (including the rules that can never
				match).
				If no
				rule matches, the outcome is "", 0, or 0.0 depending on the output
				type.
			</p>
			<p>
				Numbers are given in the usual decimal representation. Note that
				strings must not contain (double-)quotes (for those cases use the following syntax: <tt>/Oscar Wilde's wisdom: "Experience is simply the name we give our mistakes."/</tt>). The flow variables are
				represented by
				<b>$${</b>
				TypeCharacterAndFlowVarName
				<b>}$$</b>
				.
				The TypeCharacter should be 'D' for double (real) values, 'I' for
				integer values and 'S' for strings.
			</p>
            <p>The logical expressions can be grouped with parentheses. The
                precedence rules for them are the following: <tt>NOT</tt> binds most, <tt>AND</tt>,
                <tt>XOR</tt> and finally <tt>OR</tt> the least.
                Comparison operators always take
                precedence over logical connectives.
                All operators (and their names)
                are case-sensitive.
            </p>

			<p>Some example rules (each should be in one line):</p>
			<pre>
// This is a comment
$${DFlowVar0}$$ > 0 => "Positive"
</pre>
			FlowVar0 has value above zero, which case the result flow variable
			has the value Positive.
			<pre>
$${SFlowVar0}$$ = "Active" AND 
    $${IFlowVar1}$$ &lt;= 5 => "Outlier"
</pre>
			When FlowVar0 is "Active" and FlowVar1 is greater or equal to 5, then
			the result is Outlier.
			<pre>
$${SFlowVar0}$$ LIKE "Market Street*" AND 
    ($${SFlowVar1}$$ IN ("married", "divorced") 
        OR $${IFlowVar2}$$ > 40) => "Strange"
</pre>
			The logical connectives help express complex conditions.
			<pre>
$${SFlowVar10}$$ MATCHES $${SFlowVar0}$$ OR $${DFlowVar2}$$ &lt; $${IFlowVar1}$$ =>
    $${SFlowVar0}$$
</pre>
			You can compare different flow variables.
			<p>
				You can use either Ctrl+Space to insert predefined parts, or
				select them from the upper controls.
			</p>
			
			<p>
				The NaNs equal to other NaN values (other values are neither less, nor
				greater or equal to NaN values).
			</p>
		</intro>

		<option name="Flow Variable List">Available flow variables, which can be used as
			variables in a rule.
		</option>
		<option name="Category">The operator categories.</option>
		<option name="Function">A list of valid operators in the selected
			category.
		</option>
		<option name="Description">Short help about the operator.</option>
		<option name="Expression">The rule editor. You can complete the expressions
            with Ctrl+Space. Each row represents a rule. A red background of the
            line signals an error and the left side of the editor then shows an error icon.
		</option>
		<option name="New flow variable name">Name of the new flow variable,
			which contains the
			outcome of the rules.
		</option>
		<link href="https://www.knime.com/knime-introductory-course/chapter7/section1/creation-and-usage-of-flow-variables">
			KNIME E-Learning Course: Creation and usage of Flow Variables in a KNIME workflow
		</link>
	</fullDescription>

	<ports>
		<inPort index="0" name="Input variables (optional)">Input variables (optional)</inPort>
		<outPort index="0" name="Output variables">Output variables.</outPort>
	</ports>
</knimeNode>