<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./rule_engine.png" type="Learner"
	xmlns="http://knime.org/node/v2.8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v2.8 http://knime.org/node/v2.8.xsd">
	<name>Ruleset Editor</name>

	<shortDescription>
        Edits PMML Rulesets.
    </shortDescription>

	<fullDescription>
		<intro>
			Using the rules specified, it creates a PMML
			<a href="http://www.dmg.org/v4-1/RuleSet.html">RuleSet</a>
			model.
			It also applies the rules to the input table.
			This node takes a list of user-defined rules and tries to match them
			to each row in the input table. If a rule matches, its outcome value
			is added into a new column.
			The first matching rule in order of definition determines the outcome.
			<p>
				Each rule is represented by a line.
				The comments start with
				<tt>//</tt>
				in a line, and anything after that is not interpreted as a rule in
				that line.
				Rules consist of a condition part (antecedent), which must
				evaluate to
				<i>true</i>
				or
				<i>false</i>
				, and an outcome (consequent, after the => symbol) which is put into
				the new column if the rule matches.
			</p>
			<p>The outcome of a rule can either be a constant string, a constant
				number or boolean constant.
				The type of the outcome column is the common super
				type of all possible
				outcomes (including the rules that can never
				match).
				If no rule matches, the outcome is a missing value.
			</p>
			<p>
				Columns are given by their name surrounded by $, numbers are given
				in the usual decimal representation. Note that strings must not
				contain (double-)quotes.
			</p>
            <p>The logical expressions can be grouped with parentheses. The
                precedence rules for them are the following: <tt>NOT</tt> binds most, <tt>AND</tt>,
                <tt>XOR</tt> and finally <tt>OR</tt> the least.
                Comparison operators always take
                precedence over logical connectives.
                All operators (and their names)
                are case-sensitive.
            </p>
			<p>Some example rules (each should be in one line):</p>
			<pre>
// This is a comment
$Col0$ > 0 => "Positive"
</pre>
			When the values in Col0 are greater than 0, we assign Positive to the
			result column value (if no previous rule matched).
			<pre>
$Col0$ = "Active" AND $Col1$ &lt;= 5 => "Outlier"
</pre>
			You can combine conditions.
			<p>
				You can use either Ctrl+Space to insert predefined parts, or
				select them from the upper controls.
			</p>
		</intro>

		<option name="Column List">Available columns, which can be used as variables
			in a rule.
		</option>
		<option name="Category">The operator categories.</option>
		<option name="Function">A list of valid operators in the selected
			category.
		</option>
		<option name="Description">Short help about the operator.</option>
		<option name="Expression">The rule editor. You can complete the expressions
			with Ctrl+Space. Each row represents a rule. The background of the
			line signals errors (pink), or comments (yellow). The left side of
			the editor can show an error icon.
		</option>
		<option name="Appended Column">Name of the newly appended column,
			which contains the outcome of the rules.
		</option>
		<option name="Replace Column">The column to replace</option>
	</fullDescription>

	<ports>
		<inPort index="0" name="Table">A table with the columns to be used in the rules.
		</inPort>
		<outPort index="0" name="Classified values">The table with the rules applied.
		</outPort>
		<outPort index="1" name="RuleSet model">The PMML RuleSet model.
		</outPort>
	</ports>
</knimeNode>
