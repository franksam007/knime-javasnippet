<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="./javascripting.png" type="Manipulator">
    <name>Java Snippet (simple)</name>
    <shortDescription>Calculates a new column based on java code snippets.</shortDescription>
    <fullDescription>
        <intro>
	        <p>
				This node allows you to execute arbitrary java code to create
				a new column or to replace an existing one. Enter the java code in 
				the text area. To address certain input values of the table 
				use <tt>$name_of_col$</tt> (a double click on the elements in the
				column list will insert a the place holder at the current cursor 
				position). For instance, the sum of the first two columns is 
				<tt>$col_1$ + $col_2$</tt> (replace col_1 and col_2 by the 
				name of the columns). Please also specify the return type with one 
				of the radio buttons. You can also use more complex 
		        statements such as <i>if-else</i> switches. For instance, to bin a numeric
		        column you could enter code as follows and check the String return type:
	        </p>
<pre>
  String bin;
  if ($col_1$ &lt; 0.5) {
    bin  = "Very small";
  } else if ($col_1$ &lt; 2.0) {
    bin  = "Small";
  } else if ($col_1$ &lt; 10.0) {
    bin  = "Medium";
  } else if ($col_1$ &lt; 20) {
    bin  = "Large";
  } else {
    bin  = "Very Large";
  }
  return bin; 
</pre>
		     <p>
		        You can also use static methods of java utility classes, e.g. to get a 
		        column with random values, simply enter <tt>Math.random()</tt> and 
		        check the double return type.
	        </p>
	        <p>
	           It is also possible to use external java libraries (that is, 
	           libraries that are not part of java boot classpath). In order
	           to include such external jar or zip files, add their location
	           in the "Additional Libraries" tab using the control buttons.  
	        </p>
	        <p>
	           Exceptions in the snippet are caught by the framework and will
	           result in a missing value for the current row. If the snippet
	           throws an exception of class <tt>Abort</tt> (an inner class that 
	           is available to each snippet without further import statements), 
	           the entire execution will halt, using the exception message
	           as error that is presented to the user.   
	        </p>
		</intro>
		<option name="Column List">
		  The list contains the column that are available in the input table.
		  Double click any of the column names to insert the respective field
		  in the expression editor. It will replace your current selection or
		  simply insert at the current caret position.
		</option>
		<option name="Flow Variable List">
		  The list contains the flow variables that are currently available at
		  the node input. Double clicking any of the entries will insert the
		  respective identifier at the current cursor position (replacing the
		  selection, if any).
		</option>
		<option name="Global Variable Declaration">
		  Define global variables here. These variables are available during 
		  the execution and they are also modifiable. Names starting with '_'
		  (underscore) are discouraged due to potential name conflicts with 
		  internally used variables.
		</option>
		<option name="Method Body">
          Enter your java code here (the entire source will be wrapped in a
          method). You can add the name of a column 
		  by double-clicking its name in the left list. Note that numeric 
		  (double-compatible) columns will be handled as <tt>Double</tt>,
		  int-compatible columns as <tt>Integer</tt> and any other column type 
		  as <tt>String</tt>. If the input type represents a collection type, 
		  it will be available as (typed) array in the snippet.
		</option>
		<option name="Insert Missing As Null">
		  If selected, missing values in the input table will be represented
		  by <tt>null</tt> in the expression. It is your responsibility to check
		  for <tt>null</tt> in this case (the fields are all real classes, 
		  so even <tt>int</tt> and <tt>double</tt> are represented as their
		  respective class <tt>Integer</tt> and <tt>Double</tt>). If unselected,
		  a missing value in the relevant input cell will immediately produce
		  a missing output cell (snippet not called). 
		</option>
		<option name="Compile on close">
		  If unchecked, the syntax test is skipped when the settings are 
		  applied to the model, allowing the dialog to close even if there are
		  syntax errors encountered. This enables the user to temporarily close
		  the dialog, investigate the input table and then return to the
		  almost-complete-and-running snippet code in the dialog. The node will
		  not be executable (it will be red) if the code contains syntax errors.
		  This option is only for convenience, it does not have any effect on
		  the output of this node.
		</option>
		<option name="Return type">
		  Specify here the resulting type of your code snippet. Unfortunately
		  KNIME cannot determine what will be the correct return type - so you 
		  need to assist here. 
		</option>
		<option name="Array Return">
		  If the result is an array, check this box. It will be represented
		  by a KNIME collection cell.  
		</option>
		<option name="Replace/Append">
		  Specify here if you want the result to be put into a separate or 
		  existing column.
		</option>
	</fullDescription>
    <ports>
        <inPort name="Any input table" index="0">Input table.</inPort>
        <outPort name="Appended table" index="0">Input table with an additional calculated column
	        or one column replaced.
        </outPort>
	</ports>
</knimeNode>
